services:
  app:
    image: ghcr.io/astronomy-software/byeoldori-server:latest
    container_name: byeoldori-app
    restart: always
    env_file:
      - .env
    environment:
      TZ: Asia/Seoul

      STORAGE_TYPE: local
      STORAGE_LOCAL_BASE_DIR: /data/uploads
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL}

      SPRING_DOCKER_COMPOSE_ENABLED: "false"
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/byeoldori?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_ROOT_PASSWORD}

      SPRING_DATA_MONGODB_HOST: mongo
      SPRING_DATA_MONGODB_PORT: "27017"
      SPRING_DATA_MONGODB_DATABASE: byeoldori
      SPRING_DATA_MONGODB_USERNAME: root
      SPRING_DATA_MONGODB_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin

      SERVER_PORT: "8080"
      SERVER_ADDRESS: "0.0.0.0"

    depends_on:
      mysql:
        condition: service_healthy
      mongo:
        condition: service_healthy

    volumes:
      - uploads:/data/uploads

    networks: [backend]

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    command: --default-authentication-plugin=mysql_native_password --lower_case_table_names=1
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: byeoldori
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [backend]

  mongo:
    image: mongo:6.0
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: admin
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [backend]

  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    restart: always
    depends_on:
      app:
        condition: service_started
    ports:
      - "80:80"
    volumes:
      - ./ops/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks: [backend]

networks:
  backend: {}

volumes:
  mysql_data: {}
  mongo_data: {}
  uploads: {}